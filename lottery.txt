// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SimpleLottery {
    address public manager;
    address[] public players;
    address public winner;
    uint public ticketPrice;
    uint public endTimestamp;
    bool public ended;

    event WinnerSelected(address winner);

    constructor(uint _ticketPrice, uint _durationDays) {
        manager = msg.sender;
        ticketPrice = _ticketPrice * 1 ether; // Convert ether to wei
        endTimestamp = block.timestamp + _durationDays * 1 days; // Set end timestamp
    }

    modifier onlyManager() {
        require(msg.sender == manager, "Only manager can call this function");
        _;
    }

    modifier onlyBeforeEnd() {
        require(block.timestamp < endTimestamp, "Lottery has already ended");
        _;
    }

    function buyTicket() public payable onlyBeforeEnd {
        require(msg.value == ticketPrice, "Incorrect ticket price");
        players.push(msg.sender);
    }

    function endLottery() public onlyManager {
        require(block.timestamp >= endTimestamp, "Lottery is still ongoing");
        require(!ended, "Lottery has already ended");
        
        uint index = random() % players.length; // Select random winner
        winner = players[index];
        payable(winner).transfer(address(this).balance); // Transfer the entire balance to the winner
        ended = true;

        emit WinnerSelected(winner);
    }

    function random() private view returns (uint) {
        return uint(keccak256(abi.encodePacked(block.basefee, block.timestamp, players.length)));
      }

    function getPlayersCount() public view returns (uint) {
        return players.length;
    }
}

      